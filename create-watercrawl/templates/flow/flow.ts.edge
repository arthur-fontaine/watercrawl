import { createFlow } from 'watercrawl';
@if(schemaLib === 'zod')
import { z } from 'zod';
@elseif(schemaLib === 'arktype')
import { type } from "arktype";
@elseif(schemaLib === 'valibot')
import * as v from 'valibot';
@end
@if(dataTreatment.includes('mongodb'))
import { MongoClient } from 'mongodb';
@end
@if(dataTreatment.includes('jsonl'))
import { appendFileSync } from 'fs';
@end

@if(dataTreatment.includes('mongodb'))
const mongoClient = new MongoClient(process.env.MONGO_URL);
await mongoClient.connect();
const db = mongoClient.db(process.env.MONGO_DB);
@end

export default createFlow({
  schemaName: "{{ schemaName }}",
  schema:
    @if(typeof schema !== 'undefined')~
 {{ schema }}
@else~
  @if(schemaLib === 'zod')~
 z.object({
    urls: z.array(z.string()).describe('The next URLs to crawl.'),
    // TODO: Add your schema here.
  })
  @elseif(schemaLib === 'arktype')~
 type({
    urls: type('string[]').describe('The next URLs to crawl.'),
    // TODO: Add your schema here.
  })
  @elseif(schemaLib === 'valibot')~
 v.object({
    urls: v.array(v.string()).describe('The next URLs to crawl.'),
    // TODO: Add your schema here.
  })
  @end~
@end~
,
  then: async ({ urls, ...data }, addToQueue) => {
    // Add the next URLs to the queue.
    addToQueue(...urls);

    @if(dataTreatment.length === 0)~
    // TODO: Do something with the data.
    @end~
    @if(dataTreatment.includes('console'))~

    console.log(data);
    @end~
    @if(dataTreatment.includes('mongodb'))~

    // Save the data to MongoDB.
    const collection = db.collection('{{ schemaName }}');
    await collection.insertOne(data);
    @end~
    @if(dataTreatment.includes('jsonl'))~

    // Save the data to a JSONL file.
    appendFileSync('{{ schemaName }}.jsonl', JSON.stringify(data) + '\n');
    @end~
  },
});
